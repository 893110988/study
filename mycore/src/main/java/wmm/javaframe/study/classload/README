http://blog.csdn.net/supingemail/article/details/52118005 spring加载配置文件详解

类加载器的代理模式
        类加载器在尝试自己去查找某个类的字节代码并定义它时，会先代理给其父类加载器，由父类加载器先去尝试加载这个类，依次类推。
    在介绍代理模式背后的动机之前，首先需要说明一下 Java 虚拟机是如何判定两个 Java 类是相同的。
    Java 虚拟机不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同的情况，才认为两个类是相同的。
    即便是同样的字节代码，被不同的类加载器加载之后所得到的类，也是不同的。
    比如一个 Java 类 com.example.Sample，编译之后生成了字节代码文件Sample.class。
    两个不同的类加载器 ClassLoaderA和 ClassLoaderB分别读取了这个 Sample.class文件，并定义出两个java.lang.Class类的实例来表示这个类。
    这两个实例是不相同的。对于 Java 虚拟机来说，它们是不同的类。试图对这两个类的对象进行相互赋值，会抛出运行时异常 ClassCastException。

加载类的过程
        在前面介绍类加载器的代理模式的时候，提到过类加载器会首先代理给其它类加载器来尝试加载某个类。
     这就意味着真正完成类的加载工作的类加载器和启动这个加载过程的类加载器，有可能不是同一个。
     真正完成类的加载工作是通过调用 defineClass来实现的；而启动类的加载过程是通过调用 loadClass来实现的。
     前者称为一个类的定义加载器（defining loader），后者称为初始加载器（initiating loader）。
     在 Java 虚拟机判断两个类是否相同的时候，使用的是类的定义加载器。
     也就是说，哪个类加载器启动类的加载过程并不重要，重要的是最终定义这个类的加载器。
     两种类加载器的关联之处在于：一个类的定义加载器是它引用的其它类的初始加载器。
     如类 com.example.Outer引用了类 com.example.Inner，则由类 com.example.Outer的定义加载器负责启动类com.example.Inner的加载过程。
     方法 loadClass()抛出的是 java.lang.ClassNotFoundException异常；方法 defineClass()抛出的是java.lang.NoClassDefFoundError异常。
     类加载器在成功加载某个类之后，会把得到的 java.lang.Class类的实例缓存起来。
     下次再请求加载该类的时候，类加载器会直接使用缓存的类的实例，而不会尝试再次加载。
     也就是说，对于一个类加载器实例来说，相同全名的类只加载一次，即 loadClass方法不会被重复调用。


总结：实际的加载类型由参数className决定，加载的类型是否相同有加载器fscl1决定
    FileSystemClassLoader fscl1 = new FileSystemClassLoader(classDataRootPath);
    FileSystemClassLoader fscl2 = new FileSystemClassLoader(classDataRootPath);
    Class<?> class1 = fscl1.loadClass(className);
    Object obj1 = class1.newInstance();
    Class<?> class2 = fscl2.loadClass(className);
    Object obj2 = class2.newInstance();


类加载顺序
    1、虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化(出现顺序排序)
    2、只有在调用new方法时才会创建类的实例
    3、类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法
    4、类实例销毁时候，首先销毁子类部分，再销毁父类部分





装载
连接
初始化
    其中装载阶段又三个基本动作组成：

    通过类型的完全限定名，产生一个代表该类型的二进制数据流
    解析这个二进制数据流为方法区内的内部数据结
    构创建一个表示该类型的java.lang.Class类的实例
    另外如果一个类装载器在预先装载的时遇到缺失或错误的class文件，它需要等到程序首次主动使用该类时才报告错误。



    连接阶段又分为三部分：

验证，确认类型符合Java语言的语义，检查各个类之间的二进制兼容性(比如final的类不用拥有子类等)，另外还需要进行符号引用的验证。
准备，Java虚拟机为类变量分配内存，设置默认初始值。
解析(可选的) ，在类型的常量池中寻找类，接口，字段和方法的符号引用，把这些符号引用替换成直接引用的过程。


　　当一个类被主动使用时，Java虚拟就会对其初始化，如下六种情况为主动使用：

当创建某个类的新实例时（如通过new或者反射，克隆，反序列化等）
当调用某个类的静态方法时
当使用某个类或接口的静态字段时
当调用Java API中的某些反射方法时，比如类Class中的方法，或者java.lang.reflect中的类的方法时
当初始化某个子类时
当虚拟机启动某个被标明为启动类的类（即包含main方法的那个类）
    Java编译器会收集所有的类变量初始化语句和类型的静态初始化器，将这些放到一个特殊的方法中：clinit。

　
实际上，static块的执行发生在“初始化”的阶段。初始化阶段，jvm主要完成对静态变量的初始化，静态块执行等工作。

下面我们看看执行static块的几种情况：

1、第一次new A()的过程会打印""；因为这个过程包括了初始化

2、第一次Class.forName("A")的过程会打印""；因为这个过程相当于Class.forName("A",true,this.getClass().getClassLoader());

3、第一次Class.forName("A",false,this.getClass().getClassLoader())的过程则不会打印""。因为false指明了装载类的过程中，不进行初始化。不初始化则不会执行static块。
